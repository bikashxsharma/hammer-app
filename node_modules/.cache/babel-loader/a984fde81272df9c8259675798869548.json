{"ast":null,"code":"import dummyData from '../questionPosts_db'; // checking if the localstorage has some value\n\nconst getInitialDataFromStorage = () => JSON.parse(window.localStorage.getItem('dummyPosts')); // store data to local storage only if local storage is empty\n\n\nif (getInitialDataFromStorage() == null) {\n  const setDataToStorage = items => window.localStorage.setItem('dummyPosts', JSON.stringify(items));\n\n  setDataToStorage(dummyData);\n} // get data from storage \n\n\nconst getDataFromStorage = () => JSON.parse(window.localStorage.getItem('dummyPosts'));\n\nconst initState = {\n  posts: getDataFromStorage()\n};\n\nconst postsReducer = (state = initState, action) => {\n  console.log(action);\n\n  switch (action.type) {\n    case \"NEWPOST\":\n      let newPosts = [...state.posts];\n      const postObj = {\n        \"image\": \"https://randomuser.me/api/portraits/women/72.jpg\",\n        \"userName\": \"New user\",\n        \"postedTime\": \"a few seconds ago\",\n        \"texts\": action.payload,\n        \"hammerCount\": \"0\"\n      };\n      newPosts.push(postObj);\n      window.localStorage.setItem('dummyPosts', JSON.stringify(newPosts));\n      return state = {\n        posts: getDataFromStorage()\n      };\n\n    case \"INCREASEHAMMER\":\n      let newPosts1 = [...state.posts];\n      dummyData[action.payload].hammerCount = (parseInt(dummyData[action.payload].hammerCount, 10) + 1).toString();\n      window.localStorage.setItem('dummyPosts', JSON.stringify(newPosts1));\n      return state = {\n        posts: getDataFromStorage()\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default postsReducer;","map":{"version":3,"sources":["F:/Programming/hammer-app/src/reducers/postsReducer.js"],"names":["dummyData","getInitialDataFromStorage","JSON","parse","window","localStorage","getItem","setDataToStorage","items","setItem","stringify","getDataFromStorage","initState","posts","postsReducer","state","action","console","log","type","newPosts","postObj","payload","push","newPosts1","hammerCount","parseInt","toString"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,qBAAtB,C,CAGA;;AACA,MAAMC,yBAAyB,GAAG,MAAMC,IAAI,CAACC,KAAL,CACpCC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,YAA5B,CADoC,CAAxC,C,CAIA;;;AAEA,IAAIL,yBAAyB,MAAM,IAAnC,EAAyC;AACrC,QAAMM,gBAAgB,GAAIC,KAAD,IAAWJ,MAAM,CAACC,YAAP,CAAoBI,OAApB,CAA4B,YAA5B,EAA0CP,IAAI,CAACQ,SAAL,CAAeF,KAAf,CAA1C,CAApC;;AACAD,EAAAA,gBAAgB,CAACP,SAAD,CAAhB;AACH,C,CAGD;;;AACA,MAAMW,kBAAkB,GAAG,MAAMT,IAAI,CAACC,KAAL,CAC7BC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,YAA5B,CAD6B,CAAjC;;AAKA,MAAMM,SAAS,GAAG;AACdC,EAAAA,KAAK,EAAEF,kBAAkB;AADX,CAAlB;;AAKA,MAAMG,YAAY,GAAG,CAACC,KAAK,GAAGH,SAAT,EAAoBI,MAApB,KAA+B;AAChDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,UAAQA,MAAM,CAACG,IAAf;AACI,SAAK,SAAL;AACI,UAAIC,QAAQ,GAAG,CAAC,GAAGL,KAAK,CAACF,KAAV,CAAf;AACA,YAAMQ,OAAO,GAAG;AACZ,iBAAS,kDADG;AAEZ,oBAAY,UAFA;AAGZ,sBAAc,mBAHF;AAIZ,iBAASL,MAAM,CAACM,OAJJ;AAKZ,uBAAe;AALH,OAAhB;AAQAF,MAAAA,QAAQ,CAACG,IAAT,CAAcF,OAAd;AACAjB,MAAAA,MAAM,CAACC,YAAP,CAAoBI,OAApB,CAA4B,YAA5B,EAA0CP,IAAI,CAACQ,SAAL,CAAeU,QAAf,CAA1C;AACA,aAAOL,KAAK,GAAG;AACXF,QAAAA,KAAK,EAAEF,kBAAkB;AADd,OAAf;;AAGJ,SAAK,gBAAL;AACI,UAAIa,SAAS,GAAG,CAAC,GAAGT,KAAK,CAACF,KAAV,CAAhB;AACAb,MAAAA,SAAS,CAACgB,MAAM,CAACM,OAAR,CAAT,CAA0BG,WAA1B,GAAwC,CAACC,QAAQ,CAAC1B,SAAS,CAACgB,MAAM,CAACM,OAAR,CAAT,CAA0BG,WAA3B,EAAwC,EAAxC,CAAR,GAAsD,CAAvD,EAA0DE,QAA1D,EAAxC;AACAvB,MAAAA,MAAM,CAACC,YAAP,CAAoBI,OAApB,CAA4B,YAA5B,EAA0CP,IAAI,CAACQ,SAAL,CAAec,SAAf,CAA1C;AACA,aAAOT,KAAK,GAAG;AACXF,QAAAA,KAAK,EAAEF,kBAAkB;AADd,OAAf;;AAKJ;AACI,aAAOI,KAAP;AA1BR;AAgCH,CAlCD;;AAoCA,eAAeD,YAAf","sourcesContent":["import dummyData from '../questionPosts_db';\r\n\r\n\r\n// checking if the localstorage has some value\r\nconst getInitialDataFromStorage = () => JSON.parse(\r\n    window.localStorage.getItem('dummyPosts')\r\n);\r\n\r\n// store data to local storage only if local storage is empty\r\n\r\nif (getInitialDataFromStorage() == null) {\r\n    const setDataToStorage = (items) => window.localStorage.setItem('dummyPosts', JSON.stringify(items));\r\n    setDataToStorage(dummyData);\r\n}\r\n\r\n\r\n// get data from storage \r\nconst getDataFromStorage = () => JSON.parse(\r\n    window.localStorage.getItem('dummyPosts')\r\n);\r\n\r\n\r\nconst initState = {\r\n    posts: getDataFromStorage()\r\n\r\n}\r\n\r\nconst postsReducer = (state = initState, action) => {\r\n    console.log(action)\r\n    switch (action.type) {\r\n        case \"NEWPOST\":\r\n            let newPosts = [...state.posts]\r\n            const postObj = {\r\n                \"image\": \"https://randomuser.me/api/portraits/women/72.jpg\",\r\n                \"userName\": \"New user\",\r\n                \"postedTime\": \"a few seconds ago\",\r\n                \"texts\": action.payload,\r\n                \"hammerCount\": \"0\"\r\n\r\n            }\r\n            newPosts.push(postObj)\r\n            window.localStorage.setItem('dummyPosts', JSON.stringify(newPosts));\r\n            return state = {\r\n                posts: getDataFromStorage()\r\n            }\r\n        case \"INCREASEHAMMER\":\r\n            let newPosts1 = [...state.posts]\r\n            dummyData[action.payload].hammerCount = (parseInt(dummyData[action.payload].hammerCount, 10) + 1).toString()\r\n            window.localStorage.setItem('dummyPosts', JSON.stringify(newPosts1));\r\n            return state = {\r\n                posts: getDataFromStorage()\r\n            }\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default postsReducer;"]},"metadata":{},"sourceType":"module"}